// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Authentication Schema
// https://authjs.dev/reference/adapter/prisma

// After changing this file, use `yarn run prisma:generate` to update client bindings
// Update development database with `yarn run prisma:push`
// Create migrations for production database with `yarn run prisma:migrate`

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts     Account[]
  sessions     Session[]
  chatSessions ChatSession[]
  chatMessages ChatMessage[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

model ChatSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  chatMessages ChatMessage[]

  @@map("chatSessions")
}

model ChatMessage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id])
  chatSessionId String

  type    ChatMessageType
  message String
  rating  Boolean?

  @@map("messages")
}

enum ChatMessageType {
  QUESTION
  ANSWER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
